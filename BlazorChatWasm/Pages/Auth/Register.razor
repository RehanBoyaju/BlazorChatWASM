@page "/register"
@using System.ComponentModel.DataAnnotations

<PageTitle>Register</PageTitle>

<div class="row">
    <div class="col-lg-6">
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert alert-danger" role="alert">
                <strong>@Message</strong>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterAsync" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.ConfirmPassword">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            <a href="@ReturnUrl" class="btn btn-outline primary" role="button">Cancel</a>
        </EditForm>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    InputModel Input = new InputModel();
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => Input.Errors is null || Input.Errors.Length == 0 ? null : $"Error: {string.Join(", ", Input.Errors)}";

    public class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm Password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        public string[] Errors { get; set; } = new string[0];
    }

    private async Task RegisterAsync()
    {
        if (AuthProvider is CustomAuthenticationStateProvider customAuthProvider)
        {
            var result = await customAuthProvider.RegisterAsync(new RegisterModel()
            {
                Email = Input.Email,
                Password = Input.Password,
            });

            if (result.Succeeded)
            {
                NavigationManager.NavigateTo(ReturnUrl??"/");
            }
            else
            {
                Input.Errors = result.Errors;

            }
        }
    }
}
