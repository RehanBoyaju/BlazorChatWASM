    @page "/chat"
    @page "/chat/{ContactId}"
    @using Microsoft.AspNetCore.SignalR
    @using Microsoft.AspNetCore.SignalR.Client
    @using System.Security.Claims
@attribute [Authorize]
<PageTitle>Chat</PageTitle>
    <h3>Chat</h3>
    <AuthorizeView>
        <Authorized>
            Hello @context.User.Identity?.Name
        </Authorized>
        <NotAuthorized>
            You are not authorized
        </NotAuthorized>
    </AuthorizeView>


    <div class="d-flex flex-grow-1 flex-row">
        <div class="d-flex flex-column px-4" style="max-height:90vh;min-height:90vh; overflow:auto;">
            <ul class="list-group">
                Online Users:
                @if (ChatUsers != null)
            {
                @foreach (var user in ChatUsers)
                {
                    @if (user.Id != ContactId)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center mt-4" @onclick="() => LoadUserChatAsync(user.Id)">
                            <div class="d-flex">
                                <div class="mr-4 ">
                                    <div class="avatar">
                                        <img src="@user.profileImageUrl" alt="pfp" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                    </div>
                                </div>
                                <div>
                                    <p class="mb-0">@user.UserName</p>
                                </div>
                            </div>
                        </li>
                    }
                    else
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center mt-4" style="background-color:#d3d3d3; transform: scale(0.95)" @onclick="() => LoadUserChatAsync(user.Id)">
                            <div class="d-flex" >
                                <div class="mr-4 ">
                                    <div class="avatar">
                                        <img src="@user.profileImageUrl" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                    </div>
                                </div>
                                <div>
                                    <p class="mb-0">@user.UserName</p>
                                </div>
                            </div>
                        </li>
                    }
                }
            }
        </ul>
    </div>
    <div class="d-flex flex-column px-4 flex-grow-1" style="max-height:70vh;min-height:70vh;">
        <div style="max-height:60vh;min-height:60vh; overflow-y:scroll;" id="chatContainer">
            @foreach (var msg in messages)
            {
                if (msg.FromUserId == CurrentUserId)
                {
                    <div class="d-flex flex-row m-2" style=" justify-content: flex-end;">
                        <div class="mr-4">
                            <div class="avatar">
                                <img src="@CurrentProfileImageUrl" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                            </div>
                        </div>
                        <div>
                            <p class="mb-0">You</p>
                            <small class="text-muted" style="font-size: xx-small;">@msg.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</small>

                            <p class="mt-2" style="padding: 15px; background-color: #1976d2 ; border-radius: 5px;">@msg.Message</p>

                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex flex-row my-4">
                        <div class="mr-4">
                            <div class="avatar">
                                <img src="@ContactProfileImageUrl" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                            </div>
                        </div>
                        <div>
                            <p class="mb-0">@msg.FromUser.Email</p>
                            <small class="text-muted" style="font-size: xx-small;">@msg.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</small>
                            <p class="mt-2" style="padding: 15px; background-color: #f4f4f4; border-radius: 5px;">@msg.Message</p>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="d-flex flex-row px-2 mx-4 mt-2">
            <InputText Placeholder="Enter Your Message..." class="mt-n2 mx-4 flex-grow-1" @bind-Value="CurrentMessage" @oninput="OnInputChanged"  @onkeydown="HandleKeyDown"/>
            <button type="submit" class="btn btn-primary" @onclick="() => SubmitAsync(CurrentMessage!)">Send</button>
        </div>
    </div>
</div>
@code
{
    [CascadingParameter] public HubConnection? hubConnection { get; set; }
    [Parameter] public string? CurrentMessage { get; set; }
    [Parameter] public string? CurrentUserId { get; set; }
    [Parameter] public string? CurrentUserEmail { get; set; }
    public List<ApplicationUser> ChatUsers = new List<ApplicationUser>();
    [Parameter] public string? ContactEmail { get; set; } 
    [Parameter] public string? ContactId { get; set; }
    private List<ChatMessage> messages = new List<ChatMessage>();
    [Parameter] public string? ContactProfileImageUrl { get; set; }
    [Parameter] public string? CurrentProfileImageUrl { get; set; }
    private async Task<string> GetProfile(string userId)
    {
        // var image = await HttpClient.GetByteArrayAsync($"api/account/{userId}/profileimage");
        // return $"data:image/jpeg;base64,{Convert.ToBase64String(image)}";
        var response = await HttpClient.GetAsync($"api/account/{userId}/profileimage");
        if (response.IsSuccessStatusCode)
        {
            var image = await response.Content.ReadAsByteArrayAsync();
            var mimeType = response.Content.Headers.ContentType?.MediaType ?? "application/octet-stream";

            return $"data:{mimeType};base64,{Convert.ToBase64String(image)}";
        }
        throw new Exception("Failed to load image");    
    }
    private async Task SubmitAsync(string message)
    {
        if (!string.IsNullOrEmpty(message) && !string.IsNullOrEmpty(ContactId))
        {
            var chatHistory = new ChatMessage()
                    {
                        FromUserId = CurrentUserId!,
                        Message = message,
                        ToUserId = ContactId,
                        CreatedDate = DateTime.Now
                    };
            await chatService.SaveMessageAsync(chatHistory);
            CurrentMessage = string.Empty;
            StateHasChanged();
            await hubConnection!.SendAsync("SendMessageAsync", chatHistory, CurrentUserEmail);

        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(HttpClient.BaseAddress!, "/signalRHub"))
            .Build();

        }
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
        hubConnection.On<ChatMessage, string>("ReceiveMessage", async (message, userName) =>
        {
            if ((ContactId == message.ToUserId && CurrentUserId == message.FromUserId) || (ContactId == message.FromUserId && CurrentUserId == message.ToUserId))
            {

                if ((ContactId == message.ToUserId && CurrentUserId == message.FromUserId))
                {
                    messages.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new ApplicationUser() {Id=CurrentUserId, Email = CurrentUserEmail },FromUserId = CurrentUserId });
                    await hubConnection.SendAsync("ChatNotificationAsync", $"New Message From {userName}", ContactId, CurrentUserId);
                }
                else if ((ContactId == message.FromUserId && CurrentUserId == message.ToUserId))
                {
                    messages.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new ApplicationUser() {Id =ContactId, Email = ContactEmail } ,FromUserId = ContactId});
                }
                await InvokeAsync(StateHasChanged);
            }
        });
        await GetUsersAsync();
        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;
        CurrentUserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        CurrentUserEmail = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        if (!string.IsNullOrEmpty(ContactId))
        {
            await LoadUserChatAsync(ContactId);
        }
    }

    async Task LoadUserChatAsync(string userId)
    {
        var contact = await chatService.GetUserDetailsAsync(userId);
        contact.profileImageUrl = await GetProfile(userId);
        ContactId = contact.Id;
        ContactEmail = contact.Email;
        NavigationManager.NavigateTo($"chat/{ContactId}");
        messages = new List<ChatMessage>();
        messages = await chatService.GetConversationAsync(ContactId);
        ContactProfileImageUrl = contact.profileImageUrl;
        CurrentProfileImageUrl = await GetProfile(CurrentUserId!);
    }
    private async Task GetUsersAsync()
    {
        ChatUsers = await chatService.GetUsersAsync();
        foreach(var user in ChatUsers)
        {
            user.profileImageUrl = await GetProfile(user.Id);
        }
     }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            await JS.InvokeAsync<string>("ScrollToBottom", "chatContainer");

        }
        private async Task HandleKeyDown(KeyboardEventArgs args)
        {
            if (args.Key == "Enter")
            {
                if (!string.IsNullOrEmpty(CurrentMessage))
                {
                    var messageToSend = CurrentMessage;  // Capture the message
                    CurrentMessage = string.Empty;  // Clear input field immediately
                    StateHasChanged();  // Update UI
                    await SubmitAsync(messageToSend);  // Call the submit method
                }
            }
        }
        private void OnInputChanged(ChangeEventArgs args)
        {
            CurrentMessage = args.Value?.ToString();
        }
    }
