    @page "/chat"
    @page "/chat/{ContactId}"
    @using Microsoft.AspNetCore.SignalR
    @using Microsoft.AspNetCore.SignalR.Client
    @using System.Security.Claims
@attribute [Authorize]
<PageTitle>Chat</PageTitle>
<AuthorizeView>
    <NotAuthorized>
        You are not authorized
    </NotAuthorized>
</AuthorizeView>
<div class="d-flex flex-grow-1 flex-row">
    <div class="d-flex flex-column px-4" style="max-height:90vh;min-height:90vh; overflow:auto;">
        <ul class="list-group">
            Online Users:
            @if (ChatUsers != null)
            {
                @foreach (var user in ChatUsers)
                {
                    @if (user.Id != Contact.Id)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center mt-4" @onclick="() => LoadUserChatAsync(user.Id)">
                            <div class="d-flex">
                                <div class="mr-4 ">
                                    <div class="avatar">
                                        <img src="@user.profileImageUrl" alt="pfp" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                    </div>
                                </div>
                                <div>
                                    <p class="mb-0">@user.UserName</p>
                                </div>
                            </div>
                        </li>
                    }
                    else
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center mt-4" style="background-color:#d3d3d3; transform: scale(0.95)" @onclick="() => LoadUserChatAsync(user.Id)">
                            <div class="d-flex">
                                <div class="mr-4 ">
                                    <div class="avatar">
                                        <img src="@user.profileImageUrl" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                                    </div>
                                </div>
                                <div>
                                    <p class="mb-0">@user.UserName</p>
                                </div>
                            </div>
                        </li>
                    }
                }
            }
            else
            {
                <li><i>Loading Users....</i></li>
            }
        </ul>
    </div>
    <div class="d-flex flex-column px-4 flex-grow-1" style="max-height:70vh;min-height:70vh;">
        <nav class="navbar navbar-expand-lg bg-body-secondary">
            <div class="container-fluid">
                <div class="d-inline-flex align-items-center gap-3 ms-3">
                    <div class="avatar">
                        <img src="@Contact.profileImageUrl" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                    </div>
                    <span>@Contact.Email</span>
                </div>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <form class="d-flex" role="search" style="margin-left:auto">
                        <InputText class="form-control me-2" type="search" placeholder="Search Message.." aria-label="Search" @bind-Value="SearchTerm" />
                        <button class="btn btn-primary" @onclick="Search"></button>
                    </form>
                </div>
            </div>
        </nav>
        <div style="max-height:60vh;min-height:60vh; overflow-y:scroll;" id="chatContainer" class="body bg-body-tertiary">
            @foreach (var msg in messages)
            {
                if (msg.FromUserId == CurrentUserId)
                {
                    <div class="d-flex flex-row m-2" style=" justify-content: flex-end;">
                        <div class="mr-4">
                            <div class="avatar">
                                <img src="@CurrentProfileImageUrl" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                            </div>
                        </div>
                        <div>
                            <p class="mb-0">You</p>
                            <small class="text-muted" style="font-size: xx-small;">@msg.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</small>

                            <p class="mt-2" style="padding: 15px; background-color: #1976d2 ; border-radius: 5px;">@msg.Message</p>

                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex flex-row my-4">
                        <div class="mr-4">
                            <div class="avatar">
                                <img src="@Contact.profileImageUrl" alt="pfp" height="50" width="40" style="height: 50px; width: 50px;  color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;" />
                            </div>
                        </div>
                        <div>
                            <p class="mb-0">@msg.FromUser.UserName</p>
                            <small class="text-muted" style="font-size: xx-small;">@msg.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</small>
                            <p class="mt-2" style="padding: 15px; background-color: #f4f4f4; border-radius: 5px;">@msg.Message</p>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="d-flex flex-row px-2 mx-4 mt-2">
            <InputText Placeholder="Enter Your Message..." class="mt-n2 mx-4 flex-grow-1" @bind-Value="CurrentMessage" @oninput="OnInputChanged" @onkeydown="HandleKeyDown" />
            <button type="submit" class="btn btn-primary" @onclick="() => SubmitAsync(CurrentMessage!)">Send</button>
        </div>
    </div>
</div>
@code
{
    [CascadingParameter] public HubConnection? hubConnection { get; set; }
    public string? CurrentMessage { get; set; }
    public string? CurrentUserId { get; set; }
    public string? CurrentUserEmail { get; set; }
    public string? CurrentProfileImageUrl { get; set; }
    public string? SearchTerm = "";
    [Parameter]
    public string? ContactId { get; set; }
    public List<ChatMessage> SearchResults = new List<ChatMessage>();

    public List<ApplicationUser> ChatUsers = new List<ApplicationUser>();
    private List<ChatMessage> messages = new List<ChatMessage>();

    ApplicationUser Contact = new ApplicationUser();


    private async Task SubmitAsync(string message)
    {
        if (!string.IsNullOrEmpty(message) && !string.IsNullOrEmpty(Contact.Id))
        {
            var chatHistory = new ChatMessage()
                {
                    FromUserId = CurrentUserId!,
                    Message = message,
                    ToUserId = Contact.Id,
                    CreatedDate = DateTime.Now
                };
            await chatService.SaveMessageAsync(chatHistory);
            CurrentMessage = string.Empty;
            StateHasChanged();
            await hubConnection!.SendAsync("SendMessageAsync", chatHistory, CurrentUserEmail);

        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(HttpClient.BaseAddress!, "/signalRHub"))
            .Build();

        }
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
        hubConnection.On<ChatMessage, string>("ReceiveMessage", async (message, userName) =>
        {
            if ((Contact.Id == message.ToUserId && CurrentUserId == message.FromUserId) || (Contact.Id == message.FromUserId && CurrentUserId == message.ToUserId))
            {

                if ((Contact.Id == message.ToUserId && CurrentUserId == message.FromUserId))
                {
                    messages.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new ApplicationUser() { Id = CurrentUserId, Email = CurrentUserEmail }, FromUserId = CurrentUserId });
                    await hubConnection.SendAsync("ChatNotificationAsync", $"New Message From {userName}", Contact.Id, CurrentUserId);
                }
                else if ((Contact.Id == message.FromUserId && CurrentUserId == message.ToUserId))
                {
                    messages.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = Contact, FromUserId = Contact.Id });
                }
                await InvokeAsync(StateHasChanged);
            }
        });
        await GetUsersAsync();
        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;
        CurrentUserId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        CurrentUserEmail = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;

        if (!string.IsNullOrEmpty(ContactId))
        {
            await LoadUserChatAsync(ContactId);
        }
        else
        {
            if (ChatUsers.Count > 0)
            {
                await LoadUserChatAsync(ChatUsers.First().Id);
            }
        }
    }

    private async Task LoadUserChatAsync(string userId)
    {
        Contact = await chatService.GetUserDetailsAsync(userId);
        NavigationManager.NavigateTo($"chat/{Contact.Id}");
        messages = new List<ChatMessage>();
        messages = await chatService.GetConversationAsync(Contact.Id);
        CurrentProfileImageUrl = await chatService.GetProfile(CurrentUserId!);
    }
    private async Task GetUsersAsync()
    {
        ChatUsers = await chatService.GetUsersAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<string>("ScrollToBottom", "chatContainer");

    }
    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            if (!string.IsNullOrEmpty(CurrentMessage))
            {
                var messageToSend = CurrentMessage;  // Capture the message
                CurrentMessage = string.Empty;  // Clear input field immediately
                StateHasChanged();  // Update UI
                await SubmitAsync(messageToSend);  // Call the submit method
            }
        }
    }
    private void OnInputChanged(ChangeEventArgs args)
    {
        CurrentMessage = args.Value?.ToString();
    }
    private async Task Search()
    {
        if (!string.IsNullOrEmpty(SearchTerm))
        {
            var search = SearchTerm;
            SearchTerm = string.Empty;
            messages = await chatService.SearchAsync(search, Contact.Id);
            StateHasChanged();
        }

    }
}
