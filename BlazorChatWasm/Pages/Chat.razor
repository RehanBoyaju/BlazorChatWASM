@page "/chat"
@page "/chat/{ContactId}"
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@attribute [Authorize]
<h3>Chat</h3>
<AuthorizeView>
    <Authorized>
        Hello @context.User.Identity?.Name
    </Authorized>
    <NotAuthorized>
        You are not authorized
    </NotAuthorized>
</AuthorizeView>


<div class="d-flex flex-grow-1 flex-row">
    <div class="d-flex flex-column px-4" style="max-height:90vh;min-height:90vh; overflow:auto;">
        <ul class="list-group">
            Online Users:
            @foreach (var user in ChatUsers)
            {
                @if (user.Id != ContactId)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center mt-4" @onclick="() => LoadUserChatAsync(user.Id)">
                        <div class="d-flex">
                            <div class="mr-4 ">
                                <div class="avatar" style="height: 50px; width: 50px; background-color: #555; color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;">
                                    @user.Email.ToUpper().FirstOrDefault()
                                </div>
                            </div>
                            <div>
                                <p class="mb-0">@user.Email</p>

                            </div>
                        </div>
                    </li>
                }
                else
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center mt-4" style="background-color: #3f51b5" @onclick="() => LoadUserChatAsync(user.Id)">
                        <div class="d-flex" style="background-color: #3f51b5">
                            <div class="mr-4 ">
                                <div class="avatar" style="height: 50px; width: 50px; background-color: lightblue; color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;">
                                    @user.Email.ToUpper().FirstOrDefault()
                                </div>
                            </div>
                            <div>
                                <p class="mb-0">@user.Email</p>
                            </div>
                        </div>
                    </li>
                }
            }
        </ul>
    </div>
    <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh;">
        <div style="max-height:60vh;min-height:60vh; overflow:scroll;" id="chatContainer">
            @foreach (var msg in messages)
            {
                if (msg.FromUserId == CurrentUserId)
                {
                    <div class="d-flex flex-row my-4" style="background-color: #3f51b5">
                        <div class="mr-4">
                            <div class="avatar" style="height: 50px; width: 50px; background-color: #3f51b5; color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;">
                                @msg.FromUser.Email.ToUpper().FirstOrDefault()
                            </div>
                        </div>
                        <div>
                            <p class="mb-0">You</p>
                            <small class="text-muted" style="font-size: xx-small;">@msg.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</small>
                            <p class="mt-2" style="padding: 15px; background-color: #f4f4f4; border-radius: 5px;">@msg.Message</p>
                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex flex-row my-4">
                        <div class="mr-4">
                            <div class="avatar" style="height: 50px; width: 50px; background-color: #3f51b5; color: white; display: flex; justify-content: center; align-items: center; border-radius: 50%;">
                                @msg.FromUser.Email.ToUpper().FirstOrDefault()
                            </div>
                        </div>
                        <div>
                            <p class="mb-0">@msg.FromUser.Email</p>
                            <small class="text-muted" style="font-size: xx-small;">@msg.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</small>
                            <p class="mt-2" style="padding: 15px; background-color: #f4f4f4; border-radius: 5px;">@msg.Message</p>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="d-flex flex-row px-2 mx-4">
            <InputText Placeholder="Enter Your Message..." class="mt-n2 mx-4" @bind-Value="CurrentMessage" />
            <button type="submit" class="btn btn-primary" @onclick="SubmitAsync">Send</button>
        </div>
    </div>
</div>
@code
{
    [CascadingParameter] public HubConnection hubConnection { get; set; }
    [Parameter] public string CurrentMessage { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public string CurrentUserEmail { get; set; }
    private List<ChatMessage> messages = new List<ChatMessage>();
    private async Task SubmitAsync()
    {
        if (!string.IsNullOrEmpty(CurrentMessage) && !string.IsNullOrEmpty(ContactId))
        {
            var chatHistory = new ChatMessage()
                {
                    Message = CurrentMessage,
                    ToUserId = ContactId,
                    CreatedDate = DateTime.Now
                };
            await chatService.SaveMessageAsync(chatHistory);
            chatHistory.FromUserId = CurrentUserId;
            await hubConnection.SendAsync("SendMessageAsync", chatHistory, CurrentUserEmail);
            CurrentMessage = string.Empty;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(HttpClient.BaseAddress, "/signalRHub"))
            .Build();

        }
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
        hubConnection.On<ChatMessage, string>("ReceiveMessage", async (message, userName) =>
        {
            if ((ContactId == message.ToUserId && CurrentUserId == message.FromUserId) || (ContactId == message.FromUserId && CurrentUserId == message.ToUserId))
            {

                if ((ContactId == message.ToUserId && CurrentUserId == message.FromUserId))
                {
                    messages.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new ApplicationUser() { Email = CurrentUserEmail } });
                    await hubConnection.SendAsync("ChatNotificationAsync", $"New Message From {userName}", ContactId, CurrentUserId);
                }
                else if ((ContactId == message.FromUserId && CurrentUserId == message.ToUserId))
                {
                    messages.Add(new ChatMessage { Message = message.Message, CreatedDate = message.CreatedDate, FromUser = new ApplicationUser() { Email = ContactEmail } });
                }
                StateHasChanged();
            }
        });
        await GetUsersAsync();
        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;
        CurrentUserId = user.Claims.Where(a => a.Type == "sub").Select(a => a.Value).FirstOrDefault();
        CurrentUserEmail = user.Claims.Where(a => a.Type == "name").Select(a => a.Value).FirstOrDefault();
        if (!string.IsNullOrEmpty(ContactId))
        {
            await LoadUserChatAsync(ContactId);
        }
    }
    public List<ApplicationUser> ChatUsers = new List<ApplicationUser>();
    [Parameter] public string ContactEmail { get; set; }
    [Parameter] public string ContactId { get; set; }
    async Task LoadUserChatAsync(string userId)
    {
        var contact = await chatService.GetUserDetailsAsync(userId);
        ContactId = contact.Id;
        ContactEmail = contact.Email;
        NavigationManager.NavigateTo($"chat/{ContactId}");
        messages = new List<ChatMessage>();
        messages = await chatService.GetConversationAsync(ContactId);
    }
    private async Task GetUsersAsync()
    {
        ChatUsers = await chatService.GetUsersAsync();
    }
}
